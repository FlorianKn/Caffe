name: "Arch_LeNet"
layer {
  name: "Input"
  type: "HDF5Data"
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "dataset/train.txt"
    batch_size: 64
    shuffle: true
  }
  include: { phase: TRAIN }
}

layer {
  name: "Input"
  type: "HDF5Data"
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "dataset/test.txt"
    batch_size: 100
  }
  include: { phase: TEST }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 32 # the number of filters
    kernel_size: 11 # specifies height and width of each filter --> each filter is 11x11
    stride: 1
   
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  pooling_param {
    kernel_size: 2
    stride: 1
    pool: MAX
  }
  bottom: "conv1"
  top: "pool1"
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 7
    group: 2
   
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 7
    stride: 1
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    group: 2
   
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
  }
}

layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    group: 2
   
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}

layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 4
    stride: 1
  }
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5"
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    group: 2
   
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}

layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 1
    stride: 1
  }
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc1"
  inner_product_param {
    num_output: 500
  }
}

layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  inner_product_param {
    num_output: 500
  }
}

layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3"
  inner_product_param {
    num_output: 500
  }
}

layer {
  name: "fc4"
  type: "InnerProduct"
  bottom: "fc3"
  top: "fc4"
  inner_product_param {
    num_output: 500
  }
}

layer {
  name: "output"
  type: "InnerProduct"
  bottom: "fc4"
  top: "output"
  inner_product_param {
    num_output: 30
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "label"
  top: "loss"
}


